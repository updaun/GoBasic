// 함수 Closure(1)

package main

import "fmt"

func main() {
	// 클로저(Closure)
	// 익명함수 사용할 경우 함수를 변수에 할당해서 사용가능
	// 함수 안에서 함수를 선언 및 정의 가능 -> 이 때 외부 함수에 선언된 변수에 접근 가능한 함수
	// 함수가 선언되는 순간에 함수가 실행 될 때 실체의 외부 변수에 접근하기 위한 스냅샷(객체)
	// 함수를 호출 할 때 이전에 존재했던 값을 유지하기 위해 -> 비동기, 누적 카운트 -> 무분별한 전역변수 남발을 줄일 수 있다.
	// 남발 시, 누적되어 메모리부족, 자원낭비 초래 가능성 증가 -> 함수형 프로그래밍에서 권장하는 방법
	// 클로저 정확하게 이해하고 사용해야 한다.

	// 예제1
	multiply := func(x, y int) int {
		return x * y
	}

	r1 := multiply(5, 10)
	fmt.Println("ex1 : ", r1)

	// 예제2
	m, n := 5, 10            // 변수가 캡처
	sum := func(c int) int { // 익명함수 변수 할당
		return m + n + c // 지역 변수 소멸되지 않는다. (함수 호출시 마다 사용 가능)
	}
	r2 := sum(10)
	fmt.Println("ex2 : ", r2)
}
